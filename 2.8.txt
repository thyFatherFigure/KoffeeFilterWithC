



All data is generated from a median of the times from
5 measured executions of the same data series of varying sizes.

Measurements using functions written in C
+----------+-----------+-------------------+------------------+
| len\func | MergeSort | QuickSort(Cutoff) | QuickSort(Basic) |
+----------+-----------+-------------------+------------------+
| 1000     | 0.019s    | 0.017s            | 0.019s           |
+----------+-----------+-------------------+------------------+
| 10000    | 0.024s    | 0.023s            | 0.024s           |
+----------+-----------+-------------------+------------------+
| 100000   | 0.094s    | 0.090s            | 0.091s           |
+----------+-----------+-------------------+------------------+
| 1000000  | 0.843s    | 0.840s            | 0.756s           |
+----------+-----------+-------------------+------------------+

Measurements using functions written Java
+----------+-----------+-----------+
| len\func | MergeSort | QuickSort |
+----------+-----------+-----------+
| 1000     | 0.327s    | 0.303s    |
+----------+-----------+-----------+
| 10000    | 0.429s    | 0.429s    |
+----------+-----------+-----------+
| 100000   | 0.916s    | 0.828s    |
+----------+-----------+-----------+
| 1000000  | 4.261s    | 4.290s    |
+----------+-----------+-----------+

Calculations
+----------+----------+----------+------+
| len\func | CwCutoff | C(basic) | Java |
+----------+----------+----------+------+
| 1000     | 12%      | 0%       | 8%   |
+----------+----------+----------+------+
| 10000    | 4%       | 0%       | 0%   |
+----------+----------+----------+------+
| 100000   | 4%       | 3%       | 11%  |
+----------+----------+----------+------+
| 1000000  | 8%       | 12       | -11% |
+----------+----------+----------+------+

Quicksort in C with cutoff ≈ 7% faster
Quicksort in C without cutoff ≈ 3.75% faster
Quicksort in Java ≈ 2% faster




























// this comment is intentional
